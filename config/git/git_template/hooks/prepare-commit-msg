#!/usr/bin/env bash
# prepare-commit-msg hook shim

set -euo pipefail

# Looks for a user‑specific prepare-commit-msg hook under XDG config

# Allow XDG override; fall back to ~/.config
CFG_ROOT="${XDG_CONFIG_HOME:-$HOME/.config}"
LOCAL_HOOK="$CFG_ROOT/git/git_template.local/hooks/prepare-commit-msg"

if [[ -r $LOCAL_HOOK ]]; then
  # shellcheck source=/dev/null
  . "$LOCAL_HOOK" "$@"
  exit $?
else
  # Inserts TBDEV‑123 prefix if your branch is named like *TBDEV‑123‑feature*

  # Skip for merge/squash commits
  SOURCE="${2:-}"
  case "$SOURCE" in
  merge | squash)
    exit 0
    ;;
  esac

  # Resolve commit message file
  COMMIT_MSG_FILE="$1"
  if [[ ! -f "$COMMIT_MSG_FILE" ]]; then
    echo "❌ Commit message file not found: $COMMIT_MSG_FILE" >&2
    exit 1
  fi

  # Get current branch
  BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || true)

  # Extract ticket ID (from anywhere in branch name)
  TICKET_ID="$(echo "$BRANCH_NAME" | tr '–—‑−' '-' | grep -oE '[A-Z]+-[0-9]+' | head -n1 || true)"

  # If no ticket, don't modify anything
  if [[ -z "${TICKET_ID:-}" ]]; then
    exit 0
  fi

  # Read commit message
  COMMIT_MSG=$(<"$COMMIT_MSG_FILE")

  # Escape ticket ID for regex
  ESCAPED_TICKET_ID=$(printf "%s\n" "$TICKET_ID" | sed 's/[][\.*^$/]/\\&/g')

  # Only prepend if ticket not already present
  if ! [[ "$COMMIT_MSG" =~ ^${ESCAPED_TICKET_ID} ]]; then
    echo "$TICKET_ID $COMMIT_MSG" >"$COMMIT_MSG_FILE"
  fi
fi

exit 0
