# -----------------------------------------------------------------------------
# trust-all-ssh-hosts
#
# This Zsh function scans your ~/.ssh/config file for all explicitly defined
# SSH hosts (excluding wildcards like '*') and attempts to SSH into each one.
#
# Purpose:
#   - Automatically accept and trust host keys (useful for new machines)
#   - Prevent manual prompts like:
#     "The authenticity of host ... can't be established... Are you sure?"
#
# How it works:
#   - Uses `ssh -o StrictHostKeyChecking=accept-new` to auto-accept host keys
#   - Ignores unreachable hosts or ones already trusted
#   - Exits immediately after connecting (no hanging sessions)
#
# Usage:
#   Run: `trust-all-ssh-hosts`
#
# Warning:
#   This bypasses manual key verification. Only use it for trusted hosts
#   (e.g., your own servers, dev/test machines, etc.)
# -----------------------------------------------------------------------------
trust-all-ssh-hosts() {
  local ssh_config="$HOME/.ssh/config"
  typeset -A host_map
  local ordered_hosts=()
  local current_hosts=()

  if [[ ! -f "$ssh_config" ]]; then
    echo "No SSH config found at $ssh_config"
    return 1
  fi

  # Parse ~/.ssh/config
  while IFS= read -r line || [[ -n "$line" ]]; do
    line="${line#"${line%%[![:space:]]*}"}"
    [[ "$line" == \#* || -z "$line" ]] && continue

    if [[ "$line" == Host\ * ]]; then
      current_hosts=()
      for h in ${(s: :)${line#Host }}; do
        [[ "$h" == "*" || "$h" == "?"* ]] && continue
        h="${h//[\"\']}"
        current_hosts+="$h"
        ordered_hosts+="$h"
      done
    elif [[ "$line" == HostName\ * ]]; then
      hn="${line#HostName }"
      hn="${hn//[\"\']}"
      for h in "${current_hosts[@]}"; do
        host_map[$h]="$hn"
      done
    fi
  done < "$ssh_config"

  # Default HostName fallback
  for h in $ordered_hosts; do
    [[ -z "${host_map[$h]}" ]] && host_map[$h]="$h"
  done

  echo "Found ${#ordered_hosts[@]} hosts in $ssh_config"
  echo ""

  for raw_host in $ordered_hosts; do
    clean_host="${raw_host//[\"\']}"
    ip="${host_map[$raw_host]}"
    [[ -z "$ip" ]] && continue

    echo "Checking host: $clean_host ($ip)..."

    if nc -G 2 -z "$ip" 22 &>/dev/null; then
      echo "  Trusting host: $clean_host"

      ssh_output=$(ssh \
        -o BatchMode=yes \
        -o StrictHostKeyChecking=accept-new \
        -o ConnectTimeout=5 \
        $clean_host exit 2>&1
      )
      ssh_status=$?

      if echo "$ssh_output" | grep -q "Permission denied"; then
        echo "    üö´ Skipped: $clean_host (Permission denied)"
      elif echo "$ssh_output" | grep -q "Host key verification failed"; then
        echo "    üö´ Skipped: $clean_host (Host key verification failed)"
      elif [[ $ssh_status -eq 0 ]]; then
        echo "    ‚úÖ Trusted: $clean_host"
      else
        echo "    ‚ö†Ô∏è Skipped: $clean_host (SSH failed)"
      fi
    else
      echo "    üö´ Skipped: $clean_host (port 22 not reachable)"
    fi
  done
}

# vim: filetype=zsh ts=2 sw=2 sts=2 et
